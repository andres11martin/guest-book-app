{"ast":null,"code":"var _jsxFileName = \"/Users/andresmartin/Documents/Coding/guest-book-app/web/pages/messages.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Global from \"../components/UI/Global\";\nimport api from \"../lib/api\";\nimport Message from \"../components/UI/Message\";\n\nconst Messages = props => {\n  db.messages.aggregate([{\n    $project: {\n      yearMonthDayUTC: {\n        $dateToString: {\n          format: \"%Y-%m-%d\",\n          date: \"$date\"\n        }\n      },\n      timewithOffsetNY: {\n        $dateToString: {\n          format: \"%H:%M:%S:%L%z\",\n          date: \"$date\",\n          timezone: \"America/New_York\"\n        }\n      },\n      timewithOffset430: {\n        $dateToString: {\n          format: \"%H:%M:%S:%L%z\",\n          date: \"$date\",\n          timezone: \"+04:30\"\n        }\n      },\n      minutesOffsetNY: {\n        $dateToString: {\n          format: \"%Z\",\n          date: \"$date\",\n          timezone: \"America/New_York\"\n        }\n      },\n      minutesOffset430: {\n        $dateToString: {\n          format: \"%Z\",\n          date: \"$date\",\n          timezone: \"+04:30\"\n        }\n      }\n    }\n  }]);\n  return __jsx(Global, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, \"Messages\"), props.messages.map(message => __jsx(Message, {\n    key: message.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, message.name + \" from \" + message.city + \" said:\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }, message.message), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, formattedDate))));\n};\n\nMessages.getInitialProps = async function () {\n  const res = await api.get('/posts');\n  const data = await res.json();\n  return {\n    messages: data\n  };\n};\n\nexport default Messages;","map":{"version":3,"sources":["/Users/andresmartin/Documents/Coding/guest-book-app/web/pages/messages.js"],"names":["Global","api","Message","Messages","props","db","messages","aggregate","$project","yearMonthDayUTC","$dateToString","format","date","timewithOffsetNY","timezone","timewithOffset430","minutesOffsetNY","minutesOffset430","map","message","id","name","city","formattedDate","getInitialProps","res","get","data","json"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,0BAApB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAExBC,EAAAA,EAAE,CAACC,QAAH,CAAYC,SAAZ,CACI,CACI;AACIC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,eAAe,EAAE;AAAEC,QAAAA,aAAa,EAAE;AAAEC,UAAAA,MAAM,EAAE,UAAV;AAAsBC,UAAAA,IAAI,EAAE;AAA5B;AAAjB,OADX;AAENC,MAAAA,gBAAgB,EAAE;AAAEH,QAAAA,aAAa,EAAE;AAAEC,UAAAA,MAAM,EAAE,eAAV;AAA2BC,UAAAA,IAAI,EAAE,OAAjC;AAA0CE,UAAAA,QAAQ,EAAE;AAApD;AAAjB,OAFZ;AAGNC,MAAAA,iBAAiB,EAAE;AAAEL,QAAAA,aAAa,EAAE;AAAEC,UAAAA,MAAM,EAAE,eAAV;AAA2BC,UAAAA,IAAI,EAAE,OAAjC;AAA0CE,UAAAA,QAAQ,EAAE;AAApD;AAAjB,OAHb;AAINE,MAAAA,eAAe,EAAE;AAAEN,QAAAA,aAAa,EAAE;AAAEC,UAAAA,MAAM,EAAE,IAAV;AAAgBC,UAAAA,IAAI,EAAE,OAAtB;AAA+BE,UAAAA,QAAQ,EAAE;AAAzC;AAAjB,OAJX;AAKNG,MAAAA,gBAAgB,EAAE;AAAEP,QAAAA,aAAa,EAAE;AAAEC,UAAAA,MAAM,EAAE,IAAV;AAAgBC,UAAAA,IAAI,EAAE,OAAtB;AAA+BE,UAAAA,QAAQ,EAAE;AAAzC;AAAjB;AALZ;AADd,GADJ,CADJ;AAaA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKV,KAAK,CAACE,QAAN,CAAeY,GAAf,CAAmBC,OAAO,IACvB,MAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,OAAO,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,OAAO,CAACE,IAAR,GAAe,QAAf,GAA0BF,OAAO,CAACG,IAAlC,GAAyC,QAA7C,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,OAAO,CAACA,OAAZ,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAII,aAAJ,CAHJ,CADH,CAFL,CADJ;AAeH,CA9BD;;AAgCApB,QAAQ,CAACqB,eAAT,GAA2B,kBAAkB;AACzC,QAAMC,GAAG,GAAG,MAAMxB,GAAG,CAACyB,GAAJ,CAAQ,QAAR,CAAlB;AACA,QAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,SAAO;AACHtB,IAAAA,QAAQ,EAAEqB;AADP,GAAP;AAGH,CAND;;AAQA,eAAexB,QAAf","sourcesContent":["import Global from \"../components/UI/Global\"\nimport api from \"../lib/api\"\nimport Message from \"../components/UI/Message\"\n\nconst Messages = (props) => {\n\n    db.messages.aggregate(\n        [\n            {\n                $project: {\n                    yearMonthDayUTC: { $dateToString: { format: \"%Y-%m-%d\", date: \"$date\" } },\n                    timewithOffsetNY: { $dateToString: { format: \"%H:%M:%S:%L%z\", date: \"$date\", timezone: \"America/New_York\" } },\n                    timewithOffset430: { $dateToString: { format: \"%H:%M:%S:%L%z\", date: \"$date\", timezone: \"+04:30\" } },\n                    minutesOffsetNY: { $dateToString: { format: \"%Z\", date: \"$date\", timezone: \"America/New_York\" } },\n                    minutesOffset430: { $dateToString: { format: \"%Z\", date: \"$date\", timezone: \"+04:30\" } }\n                }\n            }\n        ]\n    )\n    return (\n        <Global>\n            <h1>Messages</h1>\n            {props.messages.map(message => (\n                <Message key={message.id}>\n                    <p>{message.name + \" from \" + message.city + \" said:\"}</p>\n                    <p>{message.message}</p>\n                    <p>{formattedDate}</p>\n                </Message>\n\n            )\n            )\n            }\n        </Global>\n    )\n}\n\nMessages.getInitialProps = async function () {\n    const res = await api.get('/posts')\n    const data = await res.json()\n    return {\n        messages: data\n    }\n}\n\nexport default Messages"]},"metadata":{},"sourceType":"module"}